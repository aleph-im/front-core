{"version":3,"file":"main.bd43360d.iframe.bundle.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA","sources":["webpack://@aleph-front/core/./src/styles/global.tsx"],"sourcesContent":["import React from 'react'\nimport {\n  createGlobalStyle,\n  css,\n  DefaultTheme,\n  Interpolation,\n} from 'styled-components'\nimport { BreakpointId } from '../themes/types'\nimport {\n  getDarkEffectCss,\n  getGlassEffectBorderCss,\n  getGlassEffectCss,\n} from './glass'\nimport {\n  getGlowHoverEffectCss,\n  getGlowMaxEffectCss,\n  getGlowMinEffectCss,\n} from './glow'\nimport {\n  noiseColor,\n  getGradientNoiseEffectCss,\n  getPlainNoiseEffectCss,\n  noiseGradient,\n  getNoiseImg1Css,\n  getNoiseImg2Css,\n} from './noise'\nimport {\n  getBackgroundColorCss,\n  getBackgroundGradientCss,\n  getResponsiveCss,\n  getTextColorCss,\n  getTypoCss,\n} from './utils'\nimport tw, { GlobalStyles as TailwindGlobalStyles } from 'twin.macro'\nimport { fontAwesomeCss } from './font'\nimport {\n  getGrainImg1Css,\n  getGrainImg2Css,\n  getPlainGrainEffectCss,\n  grainColor,\n} from './grains'\n\nexport const GlobalStyles = () => (\n  <>\n    <TailwindGlobalStyles />\n    <CustomGlobalStyles />\n  </>\n)\n\nconst CustomGlobalStyles = createGlobalStyle`\n  ${({ theme }) => {\n    const colorCss = colorClasses(theme)\n    const effects1Css = alephEffectClasses(theme)\n    const effects2Css = twentysixEffectClasses(theme)\n    const typoCss = typoClasses(theme)\n    const fontUrlCss = fontUrlImports(theme)\n\n    return css`\n      ${fontAwesomeCss}\n      ${fontUrlCss}\n\n      ${colorCss}\n      ${effects1Css}\n      ${effects2Css}\n      ${typoCss}\n\n      window {\n        scroll-behavior: smooth;\n      }\n\n      html {\n        /* @note: Scaled down by default (but all calculations from designs are consistent with base 16px = 1rem) */\n        font-size: 14px;\n      }\n\n      body {\n        ${tw`m-0 p-0 antialiased`}\n        background-color: ${theme.color.background};\n        color: ${theme.color.text};\n        /* @note: overrides tp-body, from body typoCss */\n        line-height: normal;\n      }\n\n      * {\n        box-sizing: border-box;\n      }\n\n      p {\n        color: ${theme.color.text}b3;\n        ${getTypoCss('body')}\n      }\n\n      section {\n        padding: 3rem 1.5rem;\n      }\n\n      form,\n      input,\n      textarea {\n        ${getTypoCss('form')}\n      }\n\n      h1,\n      h2,\n      h3,\n      h4,\n      h5,\n      h6,\n      header {\n        margin-top: 0;\n        margin-bottom: 1.5rem;\n      }\n\n      input:-webkit-autofill,\n      input:-webkit-autofill:hover,\n      input:-webkit-autofill:focus,\n      textarea:-webkit-autofill,\n      textarea:-webkit-autofill:hover,\n      textarea:-webkit-autofill:focus,\n      select:-webkit-autofill,\n      select:-webkit-autofill:hover,\n      select:-webkit-autofill:focus {\n        -webkit-text-fill-color: ${theme.color.text};\n        -webkit-box-shadow: 0 0 0px 1000px #ffffff00 inset;\n        transition: background-color 5000s ease-in-out 0s;\n        border-radius: 1.875rem;\n      }\n    `\n  }}\n`\n\nfunction colorClasses(theme: DefaultTheme) {\n  return css`\n    /* COLORS */\n    ${Object.keys(theme.color).map(\n      (color) => css`\n        .bg-${color} {\n          ${getBackgroundColorCss(color)}\n        }\n      `,\n    )}\n\n    /* TEXT COLORS */\n    ${Object.keys(theme.color).map(\n      (color) => css`\n        .text-${color} {\n          ${getTextColorCss(color)}\n        }\n      `,\n    )}\n\n    /* GRADIENTS */\n    ${Object.keys(theme.gradient).map(\n      (color) => css`\n        .gr-${color} {\n          ${getBackgroundGradientCss(color)}\n        }\n      `,\n    )}\n  `\n}\n\nfunction fontUrlImports(theme: DefaultTheme) {\n  const importCss = theme.font.urls.flatMap(\n    (url) => css`\n      @import '${url}';\n    `,\n  )\n\n  return css`\n    ${importCss}\n  `\n}\n\nfunction alephEffectClasses(theme: DefaultTheme) {\n  if (theme.name !== 'aleph') return\n\n  const glowColors = ['main0', 'main1', 'main2']\n  const glowMaxColors = ['main0', 'main1', 'main2', 'extra0', 'extra1']\n  const glassColors = [\n    'main0',\n    'main1',\n    'main2',\n    'base0',\n    'base1',\n    'base2',\n    'colored0',\n  ]\n  const darkColors = ['main0']\n  const noisePlainColors = Object.keys(noiseColor)\n  const noiseGradientColors = Object.keys(noiseGradient)\n\n  const glowHoverCss = glowColors.flatMap(\n    (color) => css`\n      .fx-glow-hover-${color} {\n        ${getGlowHoverEffectCss(color)}\n      }\n    `,\n  )\n\n  const glowMinCss = glowColors.flatMap(\n    (color) => css`\n      .fx-glow-min-${color} {\n        ${getGlowMinEffectCss(color)}\n      }\n    `,\n  )\n\n  const glowMaxCss = glowMaxColors.flatMap(\n    (color) => css`\n      .fx-glow-max-${color} {\n        ${getGlowMaxEffectCss(color)}\n      }\n    `,\n  )\n\n  const glassCss = glassColors.flatMap(\n    (color) => css`\n      .fx-glass-${color} {\n        ${getGlassEffectCss(color)}\n      }\n\n      .fx-glass-border-${color} {\n        ${getGlassEffectBorderCss(color)}\n      }\n    `,\n  )\n\n  const darkCss = darkColors.flatMap(\n    (color) => css`\n      .fx-dark-${color} {\n        ${getDarkEffectCss(color)}\n      }\n    `,\n  )\n\n  const noiseImg1Css = css`\n    ${noisePlainColors.map((color) => `.fx-noise-${color}`).join(', ')} {\n      ${getNoiseImg1Css()}\n    }\n  `\n\n  const noiseImg2Css = css`\n    ${noiseGradientColors.map((color) => `.fx-noise-${color}`).join(', ')} {\n      ${getNoiseImg2Css()}\n    }\n  `\n\n  const noisePlainCss = noisePlainColors.flatMap(\n    (color) => css`\n      .fx-noise-${color} {\n        ${getPlainNoiseEffectCss(color)}\n      }\n    `,\n  )\n\n  const noiseGradientCss = noiseGradientColors.flatMap(\n    (color) => css`\n      .fx-noise-${color} {\n        ${getGradientNoiseEffectCss(color)}\n      }\n    `,\n  )\n\n  return css`\n    ${glowHoverCss}\n    ${glowMinCss}\n    ${glowMaxCss}\n    ${glassCss}\n    ${darkCss}\n    ${noiseImg1Css}\n    ${noiseImg2Css}\n    ${noisePlainCss}\n    ${noiseGradientCss}\n  `\n}\n\nfunction twentysixEffectClasses(theme: DefaultTheme) {\n  if (theme.name !== 'twentysix') return\n\n  const grainPlainColors = Object.keys(grainColor)\n  const [colors1, ...colors2] = grainPlainColors\n\n  const grainImg1Css = css`\n    ${[colors1].map((color) => `.fx-grain-${color}`).join(', ')} {\n      ${getGrainImg1Css()}\n    }\n  `\n\n  const grainImg2Css = css`\n    ${colors2.map((color) => `.fx-grain-${color}`).join(', ')} {\n      ${getGrainImg2Css()}\n    }\n  `\n\n  const grainPlainCss = grainPlainColors.flatMap(\n    (color) => css`\n      .fx-grain-${color} {\n        ${getPlainGrainEffectCss(color)}\n      }\n    `,\n  )\n\n  return css`\n    ${grainImg1Css}\n    ${grainImg2Css}\n    ${grainPlainCss}\n  `\n}\nfunction typoClasses(theme: DefaultTheme) {\n  const typos = Object.entries(theme.typo).sort(\n    ([, av], [, bv]) => av.size - bv.size,\n  )\n\n  const fontSizes = getSortedFontSizes(theme)\n\n  function getTypoClasses(bp: string) {\n    return typos.map(\n      ([k, v]) => css`\n        .${bp}tp-${k} ${v.tag && !bp ? `, ${k}` : ''} {\n          ${getTypoCss(k as any)}\n        }\n      `,\n    )\n  }\n\n  function getFontSizesClasses(bp: string) {\n    return fontSizes.map(\n      ([k, v]) => css`\n        .${bp}fs-${k} {\n          font-size: ${v};\n        }\n      `,\n    )\n  }\n\n  const responsiveTypoCss = getResponsiveClasses(theme, getTypoClasses)\n\n  const responsiveFontSizesCss = getResponsiveClasses(\n    theme,\n    getFontSizesClasses,\n  )\n\n  return css`\n    /* TYPOS */\n    ${responsiveTypoCss}\n\n    /* FONT-SIZE */\n    ${responsiveFontSizesCss}\n  `\n}\n\nfunction getResponsiveClasses(\n  theme: DefaultTheme,\n  getClasses: (bp: string) => Interpolation<any>[],\n) {\n  const breakpointId = getSortedResponsiveBreakpoints(theme)\n\n  return [undefined, ...breakpointId].map((bp) =>\n    getResponsiveCss(bp, getClasses(bp ? `${bp}\\\\:` : '')),\n  )\n}\n\nfunction getSortedResponsiveBreakpoints(theme: DefaultTheme): BreakpointId[] {\n  return Object.entries(theme.breakpoint)\n    .sort(([, av], [, bv]) => av - bv)\n    .map(([k]) => k as BreakpointId)\n}\n\nfunction getSortedFontSizes(theme: DefaultTheme): [string, string][] {\n  return [[0, 0], ...Object.entries(theme.font.size)]\n    .sort(([, av], [, bv]) => av - bv)\n    .map(([k, v]) => [k + '', (v ? `${v}rem` : '0') as string])\n}\n"],"names":[],"sourceRoot":""}